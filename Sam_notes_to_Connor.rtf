{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fswiss\fcharset0 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;\red153\green168\blue186;\red32\green32\blue32;\red117\green114\blue185;
\red88\green118\blue71;\red191\green100\blue38;\red254\green187\blue91;}
{\*\expandedcolortbl;;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c45882\c44706\c72549;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c99608\c73333\c35686;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Connor,\
\
Thanks for giving me a chance to read your code! LMK if any of my comments or changes are unclear in the code. You can take or leave them.\
\
Some general thoughts:\
\
1) While Python uses dynamic typing (i.e., a variable can be a string one minute and an Int the next), in Python 3 they introduced the ability to define variable types and return types, which allows the compiler to warn you as you are writing code if you are misusing a variable, or passing a value of the wrong type into a function call. It\'92s not a requirement of the language but it makes your code stronger. You can declare a variable to be of a specific type with this format:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\fs26 \cf2 \cb3 my_string: \cf4 str \cf2 = \cf5 "I am a string"
\f0\fs24 \cf0 \cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
And you can define that a function returns a particular type by doing:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs26 \cf6 \cb3 def \cf7 gimme_a_string\cf2 () -> \cf4 str\cf2 :\
    \cf6 return \cf5 "Return value"\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb1 \
2) Make sure you are using a good IDE that supports the language(s) you\'92re coding in. For example, I opened your Python files in PyCharm, which instantly showed me a few things wrong with individual files such as unused imports, incorrect spacing, etc.\
\
3) If you haven\'92t, you may want to learn about \'93complexity,\'94 \'93Big-O\'94 notation, and algorithms. It\'92s of particular use to notice when you\'92re setting up multiple loops in a function. Loops do a lot of work and take a lot of time (relatively speaking), so anything you can do to reduce the 
\f2\i number
\f0\i0  of loops you run is good form. You don\'92t have any nested loops here, though, so realistically your loops aren\'92t that \'93expensive\'94 (meaning costly in time and/or memory usage), it\'92s just always good form to do your work as efficiently as possible and create as few unnecessary variables as possible without producing code that\'92s difficult to read or understand\
\
4) IMO the README should provide clear instructions for how to use all of your code. For me as an outsider it\'92s unclear how I would actually use this if I wanted to do reproduce your results and/or modify anything.\
\
}